name: Red Hat & Windows Automation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      target_os:
        description: 'Target operating system'
        required: true
        default: 'both'
        type: choice
        options:
        - redhat
        - windows
        - both
  push:
    branches: [ main ]
    paths:
      - 'playbooks/**'
      - 'inventories/**'
      - '.github/workflows/**'

env:
  # Red Hat server authentication
  RHEL_USERNAME: ${{ secrets.RHEL_USERNAME }}
  RHEL_PASSWORD: ${{ secrets.RHEL_PASSWORD }}
  CENTOS_USERNAME: ${{ secrets.CENTOS_USERNAME }}
  SSH_PRIVATE_KEY_FILE: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
  
  # Windows authentication
  WINDOWS_USERNAME: ${{ secrets.WINDOWS_USERNAME }}
  WINDOWS_PASSWORD: ${{ secrets.WINDOWS_PASSWORD }}
  DOMAIN_USERNAME: ${{ secrets.DOMAIN_USERNAME }}
  DOMAIN_PASSWORD: ${{ secrets.DOMAIN_PASSWORD }}

jobs:
  redhat-automation:
    runs-on: [self-hosted, rhel-windows-ee]
    if: ${{ inputs.target_os == 'redhat' || inputs.target_os == 'both' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Verify Red Hat automation tools
      run: |
        docker run --rm sstormes/awx-azure-ee:latest ansible --version
        docker run --rm sstormes/awx-azure-ee:latest ansible-runner --version
        docker run --rm sstormes/awx-azure-ee:latest python3 -c "import rpm; print('RPM module available')"
        docker run --rm sstormes/awx-azure-ee:latest ssh -V
        docker run --rm sstormes/awx-azure-ee:latest sshpass -V
    
    - name: List available collections
      run: |
        docker run --rm sstormes/awx-azure-ee:latest ansible-galaxy collection list | grep -E "(redhat|posix|general)"
    
    - name: Setup SSH key
      run: |
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
        fi
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Test Red Hat connectivity
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
          -e ANSIBLE_HOST_KEY_CHECKING=false \
          sstormes/awx-azure-ee:latest \
          ansible redhat_servers -i inventories/${{ inputs.environment || 'dev' }}/hosts.yml -m ping --ask-pass || echo "Connection test failed (expected if servers are not accessible)"
    
    - name: Run Red Hat configuration playbook
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
          -e RHEL_USERNAME -e RHEL_PASSWORD -e CENTOS_USERNAME -e SSH_PRIVATE_KEY_FILE -e SSH_PUBLIC_KEY \
          -e ANSIBLE_HOST_KEY_CHECKING=false -e ANSIBLE_SSH_PIPELINING=true \
          sstormes/awx-azure-ee:latest \
          ansible-playbook playbooks/redhat-config.yml \
            -i inventories/${{ inputs.environment || 'dev' }}/hosts.yml \
            -e target_environment=${{ inputs.environment || 'dev' }} \
            -v
      if: hashFiles('playbooks/redhat-config.yml') != ''
      env:
        ANSIBLE_HOST_KEY_CHECKING: false
        ANSIBLE_SSH_PIPELINING: true
    
    - name: Run Red Hat system health check
      run: |
        ansible-playbook playbooks/azure-deployment.yml \
          -i inventories/${{ inputs.environment || 'dev' }}/hosts.yml \
          -e target_environment=${{ inputs.environment || 'dev' }} \
          -v
      if: hashFiles('playbooks/azure-deployment.yml') != ''
      env:
        ANSIBLE_HOST_KEY_CHECKING: false

  windows-automation:
    runs-on: [self-hosted, rhel-windows-ee]
    if: ${{ inputs.target_os == 'windows' || inputs.target_os == 'both' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Verify Windows automation tools
      run: |
        docker run --rm sstormes/awx-azure-ee:latest ansible --version
        docker run --rm sstormes/awx-azure-ee:latest ansible-runner --version
        docker run --rm sstormes/awx-azure-ee:latest python3 -c "import winrm; print('WinRM available')"
        docker run --rm sstormes/awx-azure-ee:latest python3 -c "import ntlm_auth; print('NTLM authentication available')"
        docker run --rm sstormes/awx-azure-ee:latest python3 -c "import requests_credssp; print('CredSSP available')"
    
    - name: List Windows collections
      run: |
        docker run --rm sstormes/awx-azure-ee:latest ansible-galaxy collection list | grep -E "(windows)"
    
    - name: Test Windows connectivity
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
          -e ANSIBLE_HOST_KEY_CHECKING=false \
          -e ANSIBLE_WINRM_SERVER_CERT_VALIDATION=ignore \
          sstormes/awx-azure-ee:latest \
          ansible windows_servers -i inventories/${{ inputs.environment || 'dev' }}/hosts.yml -m ansible.windows.win_ping || echo "Connection test failed (expected if servers are not accessible)"
    
    - name: Run Windows configuration playbook
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
          -e ANSIBLE_HOST_KEY_CHECKING=false \
          -e ANSIBLE_WINRM_SERVER_CERT_VALIDATION=ignore \
          -e WINDOWS_USERNAME -e WINDOWS_PASSWORD -e DOMAIN_USERNAME -e DOMAIN_PASSWORD \
          sstormes/awx-azure-ee:latest \
          ansible-playbook playbooks/windows-config.yml \
            -i inventories/${{ inputs.environment || 'dev' }}/hosts.yml \
            -e target_environment=${{ inputs.environment || 'dev' }} \
            -v
      if: hashFiles('playbooks/windows-config.yml') != ''
      env:
        WINDOWS_USERNAME: ${{ secrets.WINDOWS_USERNAME }}
        WINDOWS_PASSWORD: ${{ secrets.WINDOWS_PASSWORD }}
        DOMAIN_USERNAME: ${{ secrets.DOMAIN_USERNAME }}
        DOMAIN_PASSWORD: ${{ secrets.DOMAIN_PASSWORD }}
        ANSIBLE_WINRM_SERVER_CERT_VALIDATION: ignore

  # Run with ansible-runner (AWX-like execution)
  ansible-runner-job:
    runs-on: [self-hosted, rhel-windows-ee]
    if: ${{ inputs.target_os == 'both' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Prepare ansible-runner directory
      run: |
        mkdir -p /runner/{project,inventory,env}
        cp -r . /runner/project/
        cp -r inventories/${{ inputs.environment || 'dev' }}/* /runner/inventory/
        
    - name: Create environment variables for ansible-runner
      run: |
        cat > /runner/env/envvars << EOF
        RHEL_USERNAME=$RHEL_USERNAME
        RHEL_PASSWORD=$RHEL_PASSWORD
        CENTOS_USERNAME=$CENTOS_USERNAME
        WINDOWS_USERNAME=$WINDOWS_USERNAME
        WINDOWS_PASSWORD=$WINDOWS_PASSWORD
        DOMAIN_USERNAME=$DOMAIN_USERNAME
        DOMAIN_PASSWORD=$DOMAIN_PASSWORD
        ANSIBLE_HOST_KEY_CHECKING=false
        ANSIBLE_WINRM_SERVER_CERT_VALIDATION=ignore
        EOF
    
    - name: Run Red Hat playbook with ansible-runner
      run: |
        ansible-runner run /runner \
          --playbook redhat-config.yml \
          --inventory /runner/inventory \
          --job-timeout 3600 \
          -v
      if: hashFiles('playbooks/redhat-config.yml') != '' && (inputs.target_os == 'redhat' || inputs.target_os == 'both')
      
    - name: Run Windows playbook with ansible-runner
      run: |
        ansible-runner run /runner \
          --playbook windows-config.yml \
          --inventory /runner/inventory \
          --job-timeout 3600 \
          -v
      if: hashFiles('playbooks/windows-config.yml') != '' && (inputs.target_os == 'windows' || inputs.target_os == 'both')

  # Build and test the execution environment
  build-and-test-ee:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build execution environment
      run: |
        docker build --platform linux/amd64 -t rhel-windows-ee:test .
        
    - name: Test execution environment
      run: |
        # Test ansible-runner is available
        docker run --rm rhel-windows-ee:test ansible-runner --version
        
        # Test Red Hat collections
        docker run --rm rhel-windows-ee:test ansible-doc redhat.rhel.rhel_facts || echo "RedHat collection test"
        
        # Test Windows collections  
        docker run --rm rhel-windows-ee:test ansible-doc ansible.windows.win_ping
        
        # Test SSH connectivity tools
        docker run --rm rhel-windows-ee:test ssh -V
        docker run --rm rhel-windows-ee:test sshpass -V
        
        # Test Python modules
        docker run --rm rhel-windows-ee:test python3 -c "import winrm, paramiko, rpm; print('All modules available')"
    
    - name: Push to Docker Hub (on main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag rhel-windows-ee:test sstormes/awx-azure-ee:latest
        docker tag rhel-windows-ee:test sstormes/awx-azure-ee:${{ github.sha }}
        docker push sstormes/awx-azure-ee:latest
        docker push sstormes/awx-azure-ee:${{ github.sha }}
